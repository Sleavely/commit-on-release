AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  PROJECT:
    Type: String
  ENVIRONMENT:
    Type: String
  GITHUBUSERNAME:
    Type: String
  GITHUBPERSONALTOKEN:
    Type: String
  GITHUBREPO:
    Type: String
  GITHUBBRANCH:
    Type: String


Mappings:
  dev:
    api:
      hostname: aws.triplehead.net

Conditions:
  IsProd: !Equals [ !Ref ENVIRONMENT, prod ]

Globals:
  Function:
    Runtime: nodejs10.x
    Timeout: 30
    Handler: index.handler
    Tracing: Active
    Environment:
      Variables:
        API_BASE_PATH: !Sub ${PROJECT}
        ENVIRONMENT: !Sub ${ENVIRONMENT}
        LOG_LEVEL: info
        PROJECT: !Sub ${PROJECT}
        GITHUB_USERNAME: !Sub ${GITHUBUSERNAME}
        GITHUB_PERSONAL_TOKEN: !Sub ${GITHUBPERSONALTOKEN}
        GITHUB_REPO: !Sub ${GITHUBREPO}
        GITHUB_BRANCH: !Sub ${GITHUBBRANCH}

Resources:
  # REST API
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${PROJECT}-${ENVIRONMENT}
      StageName: !Ref ENVIRONMENT
      Cors:
        AllowMethods: "'POST, GET, OPTIONS'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml

  BasePath:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Sub ${PROJECT}
      DomainName: !FindInMap [!Ref ENVIRONMENT, api, hostname]
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGateway.Stage

  ApiLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${PROJECT}-api-${ENVIRONMENT}
      CodeUri: dist/src/
      Handler: index.handler

  ApiLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApiLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  ApiHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ApiLambda}
      RetentionInDays: 60
